name: PR-Arena Resolver

on:
  workflow_call:
    inputs:
      issue_number:
        required: true
        type: number
      llm_models:
        required: true
        type: string
      base_url:
        required: true
        type: string
      pat_token:
        required: true
        type: string
      pat_username:
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    timeout-minutes: 40  # Set a 40-minute timeout for the entire job
    steps:
      - name: Initial comment with instruction
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.pat_token }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `👐 OpenHands PR-Arena has started the task: [click here for details](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}). For more info about how to use OpenHands PR-Arena, [click this link](https://github.com/neulab/pr-arena?tab=readme-ov-file#qa).`
            });

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}/lib/python3.12/site-packages/*
          key: ${{ runner.os }}-pip-pr-arena-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-pr-arena-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pr-arena==0.2.5

      - name: Attempt to resolve issues and send output to DB
        id: resolve_issues
        env:
          PYTHONPATH: ""
          LLM_MODELS: ${{ inputs.llm_models }}
        run: |
          cd /tmp && python -m resolver.resolve_issue \
            --selected-repo ${{ github.repository }} \
            --comment-id ${{ github.event.comment.id || 'None' }} \
            --issue-number ${{ inputs.issue_number }} \
            --token ${{ inputs.pat_token }} \
            --llm-base-url ${{ inputs.base_url }} \
            --llm-models '${{ env.LLM_MODELS }}'\
            --username ${{ inputs.pat_username }} \
        continue-on-error: true

      - name: Check for failure
        id: check_failure
        run: |
          if [ "${{ env.FAILED }}" == "TRUE" ] || [ "${{ steps.resolve_issues.outcome }}" == "failure" ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
          else
            echo "failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Log agent failure error
        if: steps.check_failure.outputs.failed == 'true' || failure()
        run: |
          UUID_VALUE="${{ env.UUID }}"
          if [ -z "$UUID_VALUE" ]; then
            UUID_VALUE=$(python3 -c "import uuid; print(uuid.uuid4())")
            echo "UUID=$UUID_VALUE" >> $GITHUB_ENV
          fi
          cd /tmp && python -m resolver.error_tracker \
            --owner ${{ github.repository_owner }} \
            --repo ${{ github.event.repository.name }} \
            --issue-number ${{ inputs.issue_number }} \
            --token ${{ inputs.pat_token }} \
            --error-type "agent_failure" \
            --error-message "Agent failed during issue resolution process" \
            --uuid "$UUID_VALUE" \
            --models '${{ env.LLM_MODELS }}'
        continue-on-error: true

      - name: Comment on issue with failure message
        if: steps.check_failure.outputs.failed == 'true' || failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.pat_token }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ PR-Arena has failed due to the agent error. Please remove the 'pr-arena' label and add it back to retry.`
            });

      - name: Exit workflow if failed
        if: steps.check_failure.outputs.failed == 'true'
        run: exit 1

      - name: Post webpage link to GitHub issue comment
        id: post_webpage
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.pat_token }}
          script: |
            const issueNumber = ${{ inputs.issue_number }};
            const repo = context.repo.repo
            const owner = context.repo.owner
            const firebaseWebpageURL = `https://pr-arena-95f88.web.app/${{ env.UUID }}`;

            github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `⚔️PR-Arena is now open⚔️! You can view the proposed fixes and make a decision at [this link](${firebaseWebpageURL}).`
            });
            
      # This step will run if the job is about to be cancelled due to timeout
      - name: Log timeout error
        if: ${{ always() && job.status == 'cancelled' }}
        run: |
          UUID_VALUE="${{ env.UUID }}"
          if [ -z "$UUID_VALUE" ]; then
            UUID_VALUE=$(python3 -c "import uuid; print(uuid.uuid4())")
            echo "UUID=$UUID_VALUE" >> $GITHUB_ENV
          fi
          
          # Try to read selected models from file, fallback to all models
          if [ -f "/tmp/selected_models.txt" ]; then
            SELECTED_MODELS=$(cat /tmp/selected_models.txt)
          else
            SELECTED_MODELS='${{ env.LLM_MODELS }}'
          fi
          
          cd /tmp && python -m resolver.error_tracker \
            --owner ${{ github.repository_owner }} \
            --repo ${{ github.event.repository.name }} \
            --issue-number ${{ inputs.issue_number }} \
            --token ${{ inputs.pat_token }} \
            --error-type "timeout" \
            --error-message "Workflow exceeded 40-minute timeout limit" \
            --uuid "$UUID_VALUE" \
            --models "$SELECTED_MODELS"
        continue-on-error: true

      - name: Handle timeout
        if: ${{ always() && job.status == 'cancelled' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.pat_token }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⏱️ PR-Arena workflow has been cancelled due to exceeding the 40-minute timeout limit. Please remove the 'pr-arena' label and add it back to retry. Also consider breaking the issue into smaller, more focused sub-issues.`
            });
      
      - name: Wait for user's decision and save it to the GitHub environment
        id: wait_for_decision
        run: |
          cd /tmp && python -m resolver.listen_for_decision \
            --repo ${{ github.repository }} \
            --issue-number ${{ inputs.issue_number }} \
            --token ${{ inputs.pat_token }} \
            --username ${{ inputs.pat_username }} \
            --uuid ${{ env.UUID }}
        continue-on-error: true

      - name: Check if decision was received
        id: check_decision
        run: |
          if [ -z "${{ env.SELECTED }}" ] || [ "${{ steps.wait_for_decision.outcome }}" == "failure" ]; then
            echo "decision_failed=true" >> $GITHUB_OUTPUT
          else
            echo "decision_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Log decision waiting error
        if: steps.check_decision.outputs.decision_failed == 'true'
        run: |
          cd /tmp && python -m resolver.error_tracker \
            --owner ${{ github.repository_owner }} \
            --repo ${{ github.event.repository.name }} \
            --issue-number ${{ inputs.issue_number }} \
            --token ${{ inputs.pat_token }} \
            --error-type "decision_error" \
            --error-message "Error while waiting for user decision" \
            --uuid "${{ env.UUID }}" \
            --models '${{ env.LLM_MODELS }}'
        continue-on-error: true

      - name: Comment on issue if decision failed
        if: steps.check_decision.outputs.decision_failed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.pat_token }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ PR-Arena encountered an error while waiting for your decision. Please remove the 'pr-arena' label and add it back to retry.`
            });

      - name: Check if user selected neither
        id: check_neither
        if: steps.check_decision.outputs.decision_failed != 'true'
        run: |
          if [ "${{ env.SELECTED_NEITHER }}" == "TRUE" ]; then
            echo "selected_neither=true" >> $GITHUB_OUTPUT
          else
            echo "selected_neither=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if selected model has empty patch
        id: check_empty_patch
        if: steps.check_decision.outputs.decision_failed != 'true' && steps.check_neither.outputs.selected_neither != 'true'
        run: |
          if [ "${{ env.SELECTED_MODEL_EMPTY_PATCH }}" == "TRUE" ]; then
            echo "empty_patch=true" >> $GITHUB_OUTPUT
          else
            echo "empty_patch=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request for the selected branch
        id: create_pr
        if: steps.check_decision.outputs.decision_failed != 'true' && steps.check_neither.outputs.selected_neither != 'true' && steps.check_empty_patch.outputs.empty_patch != 'true'
        run: |
          cd /tmp && python -m resolver.send_pull_request \
            --issue-number ${{ inputs.issue_number }} \
            --model-number ${{ env.SELECTED }} \
            --pr-type draft \
            --username ${{ inputs.pat_username }} \
            --reviewer ${{ github.actor }} \
            --token ${{ inputs.pat_token }} | tee pr_result${{ env.SELECTED }}.txt && \
            grep "draft created" pr_result${{ env.SELECTED }}.txt | sed 's/.*\///g' > pr_number.txt
        continue-on-error: true

      - name: Comment on issue with neither selected message
        if: steps.check_neither.outputs.selected_neither == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.pat_token }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `You chose ‘neither,’ so no PR was created—neither fix fit the issue.`
            });

      - name: Comment on issue with empty patch message
        if: steps.check_empty_patch.outputs.empty_patch == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.pat_token }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `You chose the model with no changes, so no PR was created—it didn’t modify any code for this issue.`
            });

      - name: Comment on issue
        if: steps.create_pr.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.pat_token }}
          script: |
            const fs = require('fs');
            const issueNumber = ${{ inputs.issue_number }};
            
            let prNumber = '';
            
            try {
              prNumber = fs.readFileSync('/tmp/pr_number.txt', 'utf8').trim();
            } catch (error) {
              console.error('Error reading PR number:', error);
            }
            
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `PR has been created based on the fix you've selected. Please review the changes.`
            });
            
      - name: Log PR creation error
        if: steps.create_pr.outcome == 'failure'
        run: |
          cd /tmp && python -m resolver.error_tracker \
            --owner ${{ github.repository_owner }} \
            --repo ${{ github.event.repository.name }} \
            --issue-number ${{ inputs.issue_number }} \
            --token ${{ inputs.pat_token }} \
            --error-type "pr_creation_error" \
            --error-message "Error while creating pull request" \
            --uuid "${{ env.UUID }}" \
            --models '${{ env.LLM_MODELS }}'
        continue-on-error: true

      - name: Comment on issue if PR creation failed
        if: steps.create_pr.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.pat_token }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ PR-Arena encountered an error while creating the pull request. Please remove the 'pr-arena' label and add it back to retry.`
            });
